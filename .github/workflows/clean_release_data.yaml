name: Download and release latest LIONS data 

on:
  push:

permissions:
  contents: write

jobs:
  run-and-release:
    runs-on: large-runner

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Git LFS
        run: |
          git lfs track "outputs/**"
          git add .gitattributes

      - uses: r-lib/actions/setup-r@v2

      - uses: r-lib/actions/setup-renv@v2

      - name: Download data
        # This script scrapes the LIONS website for links, checks for new data, and downloads if new releases are available
        run: |
          mkdir -p inputs
          Rscript scripts/download_lions.R 
     
      - name: Show decided env
        run: |
          printf 'SHOULD_RUN=[%s]\n' "${SHOULD_RUN}" 
          printf 'LATEST_MONTH_TAG=[%s]\n' "${LATEST_MONTH_TAG}"
          printf 'LATEST_MONTH_NAME=[%s]\n' "${LATEST_MONTH_NAME}"
          
      - name: Unzip data
        # if: env.SHOULD_RUN == 'true' # Written in the checker of 'Download data' scripts/download_lions.R
        run: |
          mkdir -p inputs/unzipped

          for z in inputs/*.[Zz][Ii][Pp]; do
            echo "Unzipping $z"
            basename=$(basename "$z")
            basename=${basename%.[Zz][Ii][Pp]}
            mkdir -p "inputs/unzipped/$basename"
            unzip -o "$z" -d "inputs/unzipped/$basename"
          done

      - name: Process data
        # if: env.SHOULD_RUN == 'true'
        run: |
          mkdir -p outputs
          Rscript scripts/read_lions.R
          Rscript scripts/read_lions_D27.R
        # Rscript scripts/read_lions_D28.R

      - name: Deidentify PII 
        run: |
          mkdir -p outputs
          Rscript scripts/deidentifying.R  // This script redacts pii   
          
      - name: Commit data files with proactive sync and retry
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add .gitattributes outputs/
            git commit -m "Update data from ${{ matrix.script }} via LFS [skip ci]"
            
            echo "Syncing with remote before push..."
            git pull --rebase origin main 
            
            for i in {1..5}; do
              echo "Push attempt $i..." 
              if git push; then
                echo "Push successful on attempt $i"
                break
              else
                echo "Push failed on attempt $i"
                if [ $i -lt 5 ]; then
                  wait_time=$((i * 10))  # Wait 10, 20, 30, 40 seconds
                  echo "Waiting ${wait_time} seconds before retry..."
                  sleep $wait_time
                  echo "Syncing with remote before retry..."
                  git pull --rebase origin main
                else
                  echo "All push attempts failed"
                  exit 1
                fi
              fi
            done
          else
            echo "No changes to commit"
          fi
